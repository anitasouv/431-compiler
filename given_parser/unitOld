	.arch armv7-a
	.comm  globalfoo,4,4
	.text
	.align  2
	.global assignment
assignment:
	push	{fp,lr}
	add	fp,sp,#4
	push	{r4,r5,r6,r7,r8}
	movw	r10, #:lower16:28
	movt	r10, #:upper16:28
	sub	sp,sp,r10
.LU2:
	b	.LU3
.LU3:
	sub	r9, fp, #8
	mov	r10, #0
	str	r10, [r9]
	mov	%r0,#12
	bl	malloc
	mov	r7,%r0

	mov	r6,r7

	sub	r9, fp, #4
	str	r6, [r9]

	sub	r9, fp, #4
	ldr	r8, [r9]

	add	r5,r8,#0

	mov	r10, #4
	str	r10, [r5]

	sub	r10, fp, #4
	ldr	r10, [r10]
	sub	r9, fp, #4
	ldr	r10, [r9]

	sub	r9, fp, #4
	ldr	r9, [r9]
	add	r4,r9,#0

	sub	r10, fp, #8
	ldr	r10, [r4]

	sub	r10, fp, #8
	ldr	r10, [r10]
	mov	%r1,r10
	movw	%r0, #:lower16:.println
	movt	%r0, #:upper16:.println
	bl	printf
	sub	r10, fp, #12
	sub	r9, fp, #8
	ldr	r10, [r9]
	sub	r10, fp, #12
	ldr	r10, [r10]
	mov	%r1,r10
	movw	%r0, #:lower16:.println
	movt	%r0, #:upper16:.println
	bl	printf
	b	.LU4
.LU4:
	movw	r10, #:lower16:28
	movt	r10, #:upper16:28
	add	sp,sp,r10
	pop	{r4,r5,r6,r7,r8}
	pop	{fp,pc}
	.size  assignment, .-assignment

	.align  2
	.global testPrint
testPrint:
	push	{fp,lr}
	add	fp,sp,#4
.LU6:
	b	.LU7
.LU7:
	mov	%r1,#1
	movw	%r0, #:lower16:.println
	movt	%r0, #:upper16:.println
	bl	printf
	mov	%r1,#3
	movw	%r0, #:lower16:.print
	movt	%r0, #:upper16:.print
	bl	printf
	b	.LU8
.LU8:
	pop	{fp,pc}
	.size  testPrint, .-testPrint

	.align  2
	.global testRead
testRead:
	push	{fp,lr}
	add	fp,sp,#4
	push	{r4,r5,r6,r7,r8}
	movw	r10, #:lower16:20
	movt	r10, #:upper16:20
	sub	sp,sp,r10
.LU10:
	b	.LU11
.LU11:
	movw	%r1, #:lower16:_scanned_
	movt	%r1, #:upper16:_scanned_
	movw	%r0, #:lower16:.read
	movt	%r0, #:upper16:.read
	bl	scanf
	movw	r9, #:lower16:_scanned_
	movt	r9, #:upper16:_scanned_
	ldr	r4, [r9]
	sub	r9, fp, #4
	str	r4, [r9]
	b	.LU12
.LU12:
	movw	r10, #:lower16:20
	movt	r10, #:upper16:20
	add	sp,sp,r10
	pop	{r4,r5,r6,r7,r8}
	pop	{fp,pc}
	.size  testRead, .-testRead

	.align  2
	.global testReadThenPrint
testReadThenPrint:
	push	{fp,lr}
	add	fp,sp,#4
	push	{r4,r5,r6,r7,r8}
	movw	r10, #:lower16:20
	movt	r10, #:upper16:20
	sub	sp,sp,r10
.LU14:
	b	.LU15
.LU15:
	movw	%r1, #:lower16:_scanned_
	movt	%r1, #:upper16:_scanned_
	movw	%r0, #:lower16:.read
	movt	%r0, #:upper16:.read
	bl	scanf
	movw	r9, #:lower16:_scanned_
	movt	r9, #:upper16:_scanned_
	ldr	r4, [r9]
	sub	r9, fp, #4
	str	r4, [r9]
	sub	r9, fp, #4
	ldr	r5, [r9]
	mov	%r1,r5
	movw	%r0, #:lower16:.print
	movt	%r0, #:upper16:.print
	bl	printf
	b	.LU16
.LU16:
	movw	r10, #:lower16:20
	movt	r10, #:upper16:20
	add	sp,sp,r10
	pop	{r4,r5,r6,r7,r8}
	pop	{fp,pc}
	.size  testReadThenPrint, .-testReadThenPrint

	.align  2
	.global dotExpression
dotExpression:
	push	{fp,lr}
	add	fp,sp,#4
	push	{r4,r5,r6,r7,r8}
	movw	r10, #:lower16:24
	movt	r10, #:upper16:24
	sub	sp,sp,r10
.LU18:
	b	.LU19
.LU19:
	mov	%r0,#4
	bl	malloc
	mov	r7,%r0
	mov	r6,r7
	sub	r9, fp, #4
	str	r6, [r9]
	sub	r9, fp, #4
	ldr	r8, [r9]
	add	r5,r8,#0
	mov	r10, #0
	str	r10, [r5]
	sub	r10, fp, #8
	ldr	r10, [r10]
	sub	r9, fp, #4
	ldr	r10, [r9]
	sub	r9, fp, #8
	ldr	r9, [r9]
	add	r4,r9,#0
	sub	r10, fp, #4
	ldr	r10, [r4]
	sub	r10, fp, #4
	ldr	r10, [r10]
	mov	%r1,r10
	movw	%r0, #:lower16:.print
	movt	%r0, #:upper16:.print
	bl	printf
	b	.LU20
.LU20:
	movw	r10, #:lower16:24
	movt	r10, #:upper16:24
	add	sp,sp,r10
	pop	{r4,r5,r6,r7,r8}
	pop	{fp,pc}
	.size  dotExpression, .-dotExpression

	.align  2
	.global functionCall
functionCall:
	push	{fp,lr}
	add	fp,sp,#4
.LU22:
	b	.LU23
.LU23:
	bl	dotExpression
	b	.LU24
.LU24:
	pop	{fp,pc}
	.size  functionCall, .-functionCall

	.align  2
	.global parameterPassing
parameterPassing:
	push	{fp,lr}
	add	fp,sp,#4
	push	{r4,r5,r6,r7,r8}
	movw	r10, #:lower16:32
	movt	r10, #:upper16:32
	sub	sp,sp,r10
.LU26:
	sub	r9, fp, #4
	str	%r0, [r9]
	sub	r9, fp, #8
	str	%r1, [r9]
	b	.LU27
.LU27:
	sub	r9, fp, #4
	ldr	r4, [r9]
	mov	%r1,r4
	movw	%r0, #:lower16:.println
	movt	%r0, #:upper16:.println
	bl	printf
	sub	r9, fp, #8
	ldr	r5, [r9]
	mov	%r1,r5
	movw	%r0, #:lower16:.println
	movt	%r0, #:upper16:.println
	bl	printf
	b	.LU28
.LU28:
	movw	r10, #:lower16:32
	movt	r10, #:upper16:32
	add	sp,sp,r10
	pop	{r4,r5,r6,r7,r8}
	pop	{fp,pc}
	.size  parameterPassing, .-parameterPassing

	.align  2
	.global main
main:
	push	{fp,lr}
	add	fp,sp,#4
.LU30:
	b	.LU31
.LU31:
	bl	testReadThenPrint
	mov	%r0,#5
	mov	%r1,#6
	bl	parameterPassing
	bl	assignment
	b	.LU32
.LU32:
	pop	{fp,pc}
	.size  main, .-main

	.section	.rodata
	.align  2
.println:
	.asciz  "%ld\n\00"
	.align  2
.print:
	.asciz  "%ld \00"
	.align  2
.read:
	.asciz  "%ld\00"
	.comm  _scanned_,4,4
	.global __aeabi_idiv
