struct simple
{
    int one;
};

struct foo
{
    int bar;
    bool cool;
    struct simple simp;
};

struct foo globalfoo;

fun passBackStruct(int x) struct simple {
    struct foo t;
    struct simple f;
    t = new foo;
    t.bar = 3;

    print t.bar endl;

    t.bar = x;

    print t.bar endl;

    f = new simple;
    f.one = x;


    return f;

}

fun assignmentToFoo(int x) void {
    struct foo t;
    t = new foo;

    t.bar = x;

    print t.bar endl;

}

fun assignment() void
{
    int i;
    struct foo u; 
    i = 0;
    u = new foo;

    u.bar = 4;
    print u.bar endl;
    print i endl;
}

fun testPrint() void
{
    print 1 endl;
    print 3;
}

fun testRead() void
{
    int i;
    i = read;
}

fun ifstatement() void 
{
    int i;
    if (1 == 0) {
	print 1 endl;
    } else {
	print 2 endl;
    }

    if (1 == 1) {
	i = 0;
	print 1 endl;
    } else {
	print 2 endl;
    }
   
}

fun testReadThenPrint() void
{
    int a;
    a = read;
    print a;
}

fun dotExpression() void 
{
    struct simple d;
    d = new simple;
    d.one = 0;

    print d.one;
}

fun functionCall() void
{
    dotExpression();
}

fun parameterPassing(int x, int y) void
{
    print x endl;
    print y endl;
}

fun whileLoop() void 
{
    int i;
    i = 10;
    while (i > 0) {
        print i endl;
        i = i - 1;
    }
}

fun main() void
{
   struct simple e;
   assignmentToFoo(11);
   testReadThenPrint();
   testPrint();
   parameterPassing(5, 6);
   assignment();
   ifstatement();
   testRead();
   dotExpression();
   functionCall();
   whileLoop();
   e = passBackStruct(2);
   print e.one endl;
}
